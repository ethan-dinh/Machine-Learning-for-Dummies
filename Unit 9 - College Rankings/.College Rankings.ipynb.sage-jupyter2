{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":145444864},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1575344008307,"exec_count":1,"id":"4a05af","input":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy import linalg","kernel":"python3","pos":1,"start":1575344001760,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008332,"exec_count":2,"id":"f3997a","input":"A = np.matrix([[3,0],[8,-1]])\nb = np.matrix([[1],[2]])\nA*b","kernel":"python3","output":{"0":{"data":{"text/plain":"matrix([[3],\n        [6]])"},"exec_count":2}},"pos":4,"start":1575344008319,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008371,"exec_count":3,"id":"cd6929","input":"#inverse:\nprint(linalg.inv(A))\n\nprint()\n\n#transpose:\nprint(A.T)\n\nprint()\n\n#determinant:\nprint(linalg.det(A))","kernel":"python3","output":{"0":{"name":"stdout","text":"[[ 0.33333333  0.        ]\n [ 2.66666667 -1.        ]]\n\n[[ 3  8]\n [ 0 -1]]\n\n-3.0\n"}},"pos":6,"start":1575344008360,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008412,"exec_count":4,"id":"7795f8","input":"linalg.solve(A, b)","kernel":"python3","output":{"0":{"data":{"text/plain":"array([[0.33333333],\n       [0.66666667]])"},"exec_count":4}},"pos":8,"start":1575344008381,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008486,"exec_count":5,"id":"b42503","input":"#least squares\nA=np.matrix([[1,1],[1,2],[1,3]])\nb=np.matrix([[1],[2],[2]])\n\nX=linalg.inv(A.T*A)*A.T*b\nprint(X)\nprint()\nprint(A*X)","kernel":"python3","output":{"0":{"name":"stdout","text":"[[0.66666667]\n [0.5       ]]\n\n[[1.16666667]\n [1.66666667]\n [2.16666667]]\n"}},"pos":10,"start":1575344008421,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008604,"exec_count":6,"id":"fd2845","input":"A=np.matrix([[3,0],[8,-1]])\n\n#eigenvalues:\nprint(linalg.eigvals(A))\n\n#eigenvalues and eigenvectors:\nprint(linalg.eig(A))","kernel":"python3","output":{"0":{"name":"stdout","text":"[-1.+0.j  3.+0.j]\n(array([-1.+0.j,  3.+0.j]), array([[0.        , 0.4472136 ],\n       [1.        , 0.89442719]]))\n"}},"pos":12,"start":1575344008493,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008753,"exec_count":7,"id":"10edf5","input":"df = pd.read_csv('data/collegedata.csv')\ndf","kernel":"python3","output":{"0":{"more_output":true}},"pos":16,"scrolled":true,"start":1575344008614,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008811,"exec_count":8,"id":"64be2a","input":"df = df[df['College'] != 'grinnell']","kernel":"python3","pos":18,"start":1575344008763,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008885,"exec_count":9,"id":"c35dd5","input":"b = df['Score']\nA_dataframe = df.drop(columns=['College', 'Score'])","kernel":"python3","pos":20,"start":1575344008820,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008920,"exec_count":10,"id":"f31e4e","input":"# scaler = MinMaxScaler()\n# scaler.fit(A)\n# scaled = scaler.transform(A)","kernel":"python3","pos":22,"start":1575344008892,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344008974,"exec_count":11,"id":"f89694","input":"A=np.matrix(A_dataframe)\nb=np.matrix(b)\nb = b.T\n\nprint(A.shape, b.shape)","kernel":"python3","output":{"0":{"name":"stdout","text":"(25, 14) (25, 1)\n"}},"pos":24,"start":1575344008926,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344009046,"exec_count":12,"id":"28b81e","input":"X=linalg.inv(A.T*A)*(A.T)*b\nX","kernel":"python3","output":{"0":{"data":{"text/plain":"matrix([[ 0.4440285 ],\n        [ 0.0458188 ],\n        [-0.00221458],\n        [ 0.08345614],\n        [-0.02947973],\n        [-0.08629494],\n        [ 0.02441425],\n        [ 0.01411534],\n        [ 0.06145716],\n        [-0.02275785],\n        [-0.06828671],\n        [ 0.47483306],\n        [-0.10011752],\n        [ 0.15681036]])"},"exec_count":12}},"pos":26,"start":1575344008986,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344009206,"exec_count":13,"id":"027155","input":"categories = A_dataframe.columns                   # column names\n\ntuples = []                                        # create tuples containing the category weights and names\nfor i in range(len(categories)):\n    tuples.append((X[i][0,0], categories[i]))\n    \ntuples.sort(reverse = True)                        # sort in decending order\n\nfor i in range(len(categories)):                   # print the output\n    print(tuples[i])","kernel":"python3","output":{"0":{"name":"stdout","text":"(0.47483306147815063, 'Freshmen Retention')\n(0.4440284991052175, 'Academic Reputation')\n(0.15681036395747983, 'Alumni Giving rank')\n(0.08345613809772368, 'Percent in Top 10 of HS')\n(0.06145716039747562, 'Fac Student Ratio (lower = better)')\n(0.045818800863871356, 'Selectivity rank (lower = better)')\n(0.02441425042844362, 'Percent classes fewer than 20 students')\n(0.014115335306772447, 'Percentage classes greater than 50 students (lower = better)')\n(-0.002214583741121212, 'SAT')\n(-0.02275784644828871, 'Percent full time faculty')\n(-0.02947973240919466, 'Acceptance Rate')\n(-0.06828671150818777, 'Graduation Retention rank (lower = better)')\n(-0.08629494142266136, 'Fac Resources Rank (lower = better)')\n(-0.10011751785227263, 'Financial resources rank (lower = better)')\n"}},"pos":28,"start":1575344009054,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344009267,"exec_count":14,"id":"df6167","input":"#insert here","kernel":"python3","pos":30,"start":1575344009214,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344009352,"exec_count":15,"id":"2f45fe","input":"#get colby's info\ncolby = df[df['College'] == 'colby']\n\n# colby = scaler.transform(colby)   # don't scale because it gives worse results\n\n#apply the least squares projection to colby's info\ncolby = colby.drop(columns = ['College', 'Score'])\ncolby = np.matrix(colby)\nprojection = colby*X\n\n#print the predicted and actual ranking\nprint('predicted ranking:', projection[0,0])\nprint('colby actual ranking:', df[df['College'] == 'colby']['Score'].values)","kernel":"python3","output":{"0":{"name":"stdout","text":"predicted ranking: 84.55517212867437\ncolby actual ranking: [84]\n"}},"pos":32,"start":1575344009276,"state":"done","type":"cell"}
{"cell_type":"code","end":1575344009484,"exec_count":16,"id":"02909e","input":"import numpy as np\nfrom scipy import linalg\n\nP=np.matrix([[1,0,2],[2,0,0],[0,1,2]])\nQ=np.matrix([[1],[2],[3]])\nprint(P*Q)\n\nA=np.matrix([[3,0],[8,-1]])\n\n#inverse:\nprint(linalg.inv(A))\n\n#determinant:\nprint(linalg.det(A))\n\n#solving Ax=b:\nb = np.matrix([[1],[2]])\nprint(linalg.solve(A, b))\n\n#eigenvalues:\nprint(linalg.eigvals(A))\n\n#eigenvalues and eigenvectors:\nprint(linalg.eig(A))\n\n#least squares\nA=np.matrix([[1,1],[1,2],[1,3]])\nb=np.matrix([[1],[2],[2]])\nX=linalg.inv(A.T*A)*A.T*b\nprint(X)\nprint(A*X)","kernel":"python3","output":{"0":{"name":"stdout","text":"[[7]\n [2]\n [8]]\n[[ 0.33333333  0.        ]\n [ 2.66666667 -1.        ]]\n-3.0\n[[0.33333333]\n [0.66666667]]\n[-1.+0.j  3.+0.j]\n(array([-1.+0.j,  3.+0.j]), array([[0.        , 0.4472136 ],\n       [1.        , 0.89442719]]))\n[[0.66666667]\n [0.5       ]]\n[[1.16666667]\n [1.66666667]\n [2.16666667]]\n"}},"pos":33,"start":1575344009367,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1b711a","input":"4.Note that you should try scaling your dataframe. However, for this specific example, we will get better results if we don't, so we'll keep these lines commented out:","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"2bce65","input":"3.We can solve the system $Ax=b$:","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"4778ec","input":"7.Print Colby's actual score and predicted score:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"48681e","input":"8.What questions or observations do you have about the importance of these categories?","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"5f7010","input":"5.We can also calculate the eigenvalues and eigenvectors of a matrix, which we'll get to more later:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"78cdbf","input":"### Linear Algebra Python Intro","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"78e984","input":"7.Print the weights in decending order:","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"801b93","input":"1.Read in the US News & World Report 2013 College Rankings:","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"803dae","input":"2.Drop Grinnnell since it does not contain SAT info:","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"8bbff6","input":"1.Let's see what the very important numpy and linalg packages can help us with. We can create matrices and multiply them together:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"b37a08","input":"5.Convert the dataframes to numpy matrices and then tranpose vector b so that the shapes are 25x14 and 25x1.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"b44a75","input":"### College Rankings","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"b5e2d8","input":"3.Save the Score column as series b and save the rest of the dataframe (except for the college and score columns) as A_dataframe:","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"c5f469","input":"6.Apply the least squares transformation:","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"ecc838","input":"Read in the necessary imports:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"ef52cb","input":"2.We can calculate the inverse, tranpose, and the determinant of a matrix:","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"f4f892","input":"Note that the above output is read as $ \\lambda_1 = -1, \\lambda_2 = 3$ with eigenvectors $v_1 = [0,1],v_2=[0.447,0.894]$, which are the normalized versions of what you get from obtaining $v_1 = [0,1],v_2=[1,2]$ by hand.\n\nI must admit that the output you get from typing ```eigenvectors(([[3,0],[8,-1]])``` into wolfram alpha is nicer.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"f8be0c","input":"4.We can find the least squares solution and projection:","pos":9,"type":"cell"}
{"last_load":1575343988379,"type":"file"}