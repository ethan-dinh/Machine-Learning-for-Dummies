{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":203624448},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1575580432185,"exec_count":1,"id":"a6e044","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils.extmath import randomized_svd","kernel":"python3","pos":0,"start":1575580428100,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580432240,"exec_count":2,"id":"086df3","input":"movies = pd.read_csv('data/ml-latest-small/movies.csv')\nprint(movies.shape)\nmovies[0:25]","kernel":"python3","output":{"0":{"name":"stdout","text":"(9742, 3)\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n      <td>Adventure|Children|Fantasy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n      <td>Comedy|Romance</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n      <td>Comedy|Drama|Romance</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n      <td>Comedy</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>Heat (1995)</td>\n      <td>Action|Crime|Thriller</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>Sabrina (1995)</td>\n      <td>Comedy|Romance</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>Tom and Huck (1995)</td>\n      <td>Adventure|Children</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>Sudden Death (1995)</td>\n      <td>Action</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>GoldenEye (1995)</td>\n      <td>Action|Adventure|Thriller</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>American President, The (1995)</td>\n      <td>Comedy|Drama|Romance</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>Dracula: Dead and Loving It (1995)</td>\n      <td>Comedy|Horror</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>Balto (1995)</td>\n      <td>Adventure|Animation|Children</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>Nixon (1995)</td>\n      <td>Drama</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>Cutthroat Island (1995)</td>\n      <td>Action|Adventure|Romance</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>Casino (1995)</td>\n      <td>Crime|Drama</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>Sense and Sensibility (1995)</td>\n      <td>Drama|Romance</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>Four Rooms (1995)</td>\n      <td>Comedy</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>Ace Ventura: When Nature Calls (1995)</td>\n      <td>Comedy</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>Money Train (1995)</td>\n      <td>Action|Comedy|Crime|Drama|Thriller</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>21</td>\n      <td>Get Shorty (1995)</td>\n      <td>Comedy|Crime|Thriller</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>22</td>\n      <td>Copycat (1995)</td>\n      <td>Crime|Drama|Horror|Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>23</td>\n      <td>Assassins (1995)</td>\n      <td>Action|Crime|Thriller</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>24</td>\n      <td>Powder (1995)</td>\n      <td>Drama|Sci-Fi</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>25</td>\n      <td>Leaving Las Vegas (1995)</td>\n      <td>Drama|Romance</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    movieId                                  title  \\\n0         1                       Toy Story (1995)   \n1         2                         Jumanji (1995)   \n2         3                Grumpier Old Men (1995)   \n3         4               Waiting to Exhale (1995)   \n4         5     Father of the Bride Part II (1995)   \n5         6                            Heat (1995)   \n6         7                         Sabrina (1995)   \n7         8                    Tom and Huck (1995)   \n8         9                    Sudden Death (1995)   \n9        10                       GoldenEye (1995)   \n10       11         American President, The (1995)   \n11       12     Dracula: Dead and Loving It (1995)   \n12       13                           Balto (1995)   \n13       14                           Nixon (1995)   \n14       15                Cutthroat Island (1995)   \n15       16                          Casino (1995)   \n16       17           Sense and Sensibility (1995)   \n17       18                      Four Rooms (1995)   \n18       19  Ace Ventura: When Nature Calls (1995)   \n19       20                     Money Train (1995)   \n20       21                      Get Shorty (1995)   \n21       22                         Copycat (1995)   \n22       23                       Assassins (1995)   \n23       24                          Powder (1995)   \n24       25               Leaving Las Vegas (1995)   \n\n                                         genres  \n0   Adventure|Animation|Children|Comedy|Fantasy  \n1                    Adventure|Children|Fantasy  \n2                                Comedy|Romance  \n3                          Comedy|Drama|Romance  \n4                                        Comedy  \n5                         Action|Crime|Thriller  \n6                                Comedy|Romance  \n7                            Adventure|Children  \n8                                        Action  \n9                     Action|Adventure|Thriller  \n10                         Comedy|Drama|Romance  \n11                                Comedy|Horror  \n12                 Adventure|Animation|Children  \n13                                        Drama  \n14                     Action|Adventure|Romance  \n15                                  Crime|Drama  \n16                                Drama|Romance  \n17                                       Comedy  \n18                                       Comedy  \n19           Action|Comedy|Crime|Drama|Thriller  \n20                        Comedy|Crime|Thriller  \n21          Crime|Drama|Horror|Mystery|Thriller  \n22                        Action|Crime|Thriller  \n23                                 Drama|Sci-Fi  \n24                                Drama|Romance  "},"exec_count":2}},"pos":2,"start":1575580432193,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580432300,"exec_count":3,"id":"6e34f4","input":"movies.tail()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9737</th>\n      <td>193581</td>\n      <td>Black Butler: Book of the Atlantic (2017)</td>\n      <td>Action|Animation|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>193583</td>\n      <td>No Game No Life: Zero (2017)</td>\n      <td>Animation|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>193585</td>\n      <td>Flint (2017)</td>\n      <td>Drama</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>193587</td>\n      <td>Bungo Stray Dogs: Dead Apple (2018)</td>\n      <td>Action|Animation</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>193609</td>\n      <td>Andrew Dice Clay: Dice Rules (1991)</td>\n      <td>Comedy</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      movieId                                      title  \\\n9737   193581  Black Butler: Book of the Atlantic (2017)   \n9738   193583               No Game No Life: Zero (2017)   \n9739   193585                               Flint (2017)   \n9740   193587        Bungo Stray Dogs: Dead Apple (2018)   \n9741   193609        Andrew Dice Clay: Dice Rules (1991)   \n\n                               genres  \n9737  Action|Animation|Comedy|Fantasy  \n9738         Animation|Comedy|Fantasy  \n9739                            Drama  \n9740                 Action|Animation  \n9741                           Comedy  "},"exec_count":3}},"pos":4,"start":1575580432247,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580432399,"exec_count":4,"id":"0b0782","input":"ratings = pd.read_csv('data/ml-latest-small/ratings.csv')\nprint(ratings.shape)\nratings.head()","kernel":"python3","output":{"0":{"name":"stdout","text":"(100836, 4)\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>964982703</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>964981247</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>964982224</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>5.0</td>\n      <td>964983815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>5.0</td>\n      <td>964982931</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   userId  movieId  rating  timestamp\n0       1        1     4.0  964982703\n1       1        3     4.0  964981247\n2       1        6     4.0  964982224\n3       1       47     5.0  964983815\n4       1       50     5.0  964982931"},"exec_count":4}},"pos":6,"start":1575580432311,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580432457,"exec_count":5,"id":"311df4","input":"print('Number of Users:')\nprint((ratings.groupby(['userId']).count()).shape[0])\nprint('Number of Movies:')\nprint((ratings.groupby(['movieId']).count()).shape[0])","kernel":"python3","output":{"0":{"name":"stdout","text":"Number of Users:\n610\nNumber of Movies:\n9724\n"}},"pos":8,"start":1575580432406,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580432494,"exec_count":6,"id":"4cde81","input":"ratings.groupby(['rating'])['userId'].count()","kernel":"python3","output":{"0":{"data":{"text/plain":"rating\n0.5     1370\n1.0     2811\n1.5     1791\n2.0     7551\n2.5     5550\n3.0    20047\n3.5    13136\n4.0    26818\n4.5     8551\n5.0    13211\nName: userId, dtype: int64"},"exec_count":6}},"pos":10,"start":1575580432462,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580433368,"exec_count":7,"id":"9f9e08","input":"ratings_pivot = pd.pivot_table(ratings, index='userId', columns='movieId', values='rating', aggfunc=np.mean)\nratings_pivot = ratings_pivot.fillna(0)\nratings_pivot.head()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>193565</th>\n      <th>193567</th>\n      <th>193571</th>\n      <th>193573</th>\n      <th>193579</th>\n      <th>193581</th>\n      <th>193583</th>\n      <th>193585</th>\n      <th>193587</th>\n      <th>193609</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9724 columns</p>\n</div>","text/plain":"movieId  1       2       3       4       5       6       7       8       \\\nuserId                                                                    \n1           4.0     0.0     4.0     0.0     0.0     4.0     0.0     0.0   \n2           0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0   \n3           0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0   \n4           0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0   \n5           4.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0   \n\nmovieId  9       10      ...  193565  193567  193571  193573  193579  193581  \\\nuserId                   ...                                                   \n1           0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n2           0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n3           0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n4           0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n5           0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n\nmovieId  193583  193585  193587  193609  \nuserId                                   \n1           0.0     0.0     0.0     0.0  \n2           0.0     0.0     0.0     0.0  \n3           0.0     0.0     0.0     0.0  \n4           0.0     0.0     0.0     0.0  \n5           0.0     0.0     0.0     0.0  \n\n[5 rows x 9724 columns]"},"exec_count":7}},"pos":12,"start":1575580432498,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580433407,"exec_count":8,"id":"02296c","input":"#insert 1","kernel":"python3","pos":14,"start":1575580433400,"state":"done","type":"cell"}
{"cell_type":"code","end":1575580433535,"exec_count":9,"id":"5d757c","input":"#insert 2","kernel":"python3","pos":16,"start":1575580433413,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0d9f0b","input":"### Homework 1: Implement the Algorithm\n\nApply the StandardScaler to the pivot table and then create a get_item_recommendations function that prints similar movies to a given movie. Here are some sample outputs to check your work:\n\nA Disney movie should return other Disney movies:\n<img src=\"images/movie1.png\" width=500>\n\nA Star Wars movie should return other Star Wars movies:\n<img src=\"images/movie2.png\" width=500>\n\nA \"Chick Flick\" movie like Shakespeare in Love should return other chick flick movies:\n<img src=\"images/movie3.png\" width=500>\n","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"11492d","input":"We can also use groupby to count how many users provided the following rankings:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"447ceb","input":"### Homework 2: Research the Netflix Prize\n\nRead a few articles to answer the following questions:\n\n1.) How much was the Netflix Prize worth?\n\n2.) What platform was the original contest hosted on?\n\n3.) What is an overview of some things that went into the algorithm?\n\n4.) Does Netflix actually use the algorithm?\n\n5.) Are there any current machine learning company-sponsored contests going on that are worth lots of money to solve?","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"455f26","input":"Notice that there are only 9,742 movies in our dataset but the movieid's go all the way into the hundreds of thousands. This is because many movieids are skipped in between (this is just a subset of the original dataset containing many more movies):","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"6d1b91","input":"## Movie Recommendations \nWe'll make movie recommendations from the [movielens dataset](http://grouplens.org/datasets/movielens/). There is a much larger dataset located here as well, but we will use the smaller version, which contains over 100,000 ratings by 610 users of 9724 movies. Here is what the movie file looks like:","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"960ed0","input":"We can create a pivot table where the columns correspond to the movieid and the rows correspond to the userid. We will fill in any movies that the users didn't rank with 0's. Below, we see that User #1 ranked Movies #1,3, and 6 as 4 stars, for example:","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"b1ac8c","input":"Here is what the ratings file looks like:","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"e83f8c","input":"We have not covered the \"groupby\" method before but it is very helpful for aggregating data:","pos":7,"type":"cell"}
{"last_load":1575580423559,"type":"file"}